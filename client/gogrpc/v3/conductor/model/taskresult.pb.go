// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/taskresult.proto

package model // import "github.com/mactaggart/conductor/client/gogrpc/v3/conductor/model"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import _struct "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskResult_Status int32

const (
	TaskResult_IN_PROGRESS                TaskResult_Status = 0
	TaskResult_FAILED                     TaskResult_Status = 1
	TaskResult_FAILED_WITH_TERMINAL_ERROR TaskResult_Status = 2
	TaskResult_COMPLETED                  TaskResult_Status = 3
)

var TaskResult_Status_name = map[int32]string{
	0: "IN_PROGRESS",
	1: "FAILED",
	2: "FAILED_WITH_TERMINAL_ERROR",
	3: "COMPLETED",
}
var TaskResult_Status_value = map[string]int32{
	"IN_PROGRESS":                0,
	"FAILED":                     1,
	"FAILED_WITH_TERMINAL_ERROR": 2,
	"COMPLETED":                  3,
}

func (x TaskResult_Status) String() string {
	return proto.EnumName(TaskResult_Status_name, int32(x))
}
func (TaskResult_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_taskresult_2c5f5a63c2a388e9, []int{0, 0}
}

type TaskResult struct {
	WorkflowInstanceId    string                    `protobuf:"bytes,1,opt,name=workflow_instance_id,json=workflowInstanceId,proto3" json:"workflow_instance_id,omitempty"`
	TaskId                string                    `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ReasonForIncompletion string                    `protobuf:"bytes,3,opt,name=reason_for_incompletion,json=reasonForIncompletion,proto3" json:"reason_for_incompletion,omitempty"`
	CallbackAfterSeconds  int64                     `protobuf:"varint,4,opt,name=callback_after_seconds,json=callbackAfterSeconds,proto3" json:"callback_after_seconds,omitempty"`
	WorkerId              string                    `protobuf:"bytes,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status                TaskResult_Status         `protobuf:"varint,6,opt,name=status,proto3,enum=conductor.proto.TaskResult_Status" json:"status,omitempty"`
	OutputData            map[string]*_struct.Value `protobuf:"bytes,7,rep,name=output_data,json=outputData,proto3" json:"output_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OutputMessage         *any.Any                  `protobuf:"bytes,8,opt,name=output_message,json=outputMessage,proto3" json:"output_message,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *TaskResult) Reset()         { *m = TaskResult{} }
func (m *TaskResult) String() string { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()    {}
func (*TaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_taskresult_2c5f5a63c2a388e9, []int{0}
}
func (m *TaskResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResult.Unmarshal(m, b)
}
func (m *TaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResult.Marshal(b, m, deterministic)
}
func (dst *TaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResult.Merge(dst, src)
}
func (m *TaskResult) XXX_Size() int {
	return xxx_messageInfo_TaskResult.Size(m)
}
func (m *TaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResult proto.InternalMessageInfo

func (m *TaskResult) GetWorkflowInstanceId() string {
	if m != nil {
		return m.WorkflowInstanceId
	}
	return ""
}

func (m *TaskResult) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskResult) GetReasonForIncompletion() string {
	if m != nil {
		return m.ReasonForIncompletion
	}
	return ""
}

func (m *TaskResult) GetCallbackAfterSeconds() int64 {
	if m != nil {
		return m.CallbackAfterSeconds
	}
	return 0
}

func (m *TaskResult) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *TaskResult) GetStatus() TaskResult_Status {
	if m != nil {
		return m.Status
	}
	return TaskResult_IN_PROGRESS
}

func (m *TaskResult) GetOutputData() map[string]*_struct.Value {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *TaskResult) GetOutputMessage() *any.Any {
	if m != nil {
		return m.OutputMessage
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskResult)(nil), "conductor.proto.TaskResult")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "conductor.proto.TaskResult.OutputDataEntry")
	proto.RegisterEnum("conductor.proto.TaskResult_Status", TaskResult_Status_name, TaskResult_Status_value)
}

func init() { proto.RegisterFile("model/taskresult.proto", fileDescriptor_taskresult_2c5f5a63c2a388e9) }

var fileDescriptor_taskresult_2c5f5a63c2a388e9 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x51, 0x6f, 0xda, 0x3c,
	0x14, 0x86, 0xbf, 0x94, 0x36, 0x2d, 0x87, 0xaf, 0x05, 0x59, 0x8c, 0x66, 0x74, 0x9a, 0x10, 0x57,
	0x48, 0x9b, 0x92, 0x89, 0x4e, 0xd3, 0xd4, 0xdd, 0x8c, 0x8e, 0x74, 0x8b, 0x04, 0x05, 0x19, 0xb6,
	0x49, 0xbb, 0x89, 0x8c, 0x63, 0xb2, 0x88, 0xc4, 0x46, 0xb6, 0xd3, 0x8e, 0x3f, 0xba, 0xdf, 0x33,
	0x25, 0x86, 0xb6, 0x62, 0xd2, 0xee, 0xe2, 0xf3, 0x3c, 0x7e, 0x75, 0x7c, 0x8e, 0x02, 0xad, 0x4c,
	0x44, 0x2c, 0xf5, 0x34, 0x51, 0x2b, 0xc9, 0x54, 0x9e, 0x6a, 0x77, 0x2d, 0x85, 0x16, 0xa8, 0x4e,
	0x05, 0x8f, 0x72, 0xaa, 0x85, 0x34, 0x85, 0xf6, 0x8b, 0x58, 0x88, 0x38, 0x65, 0x5e, 0x79, 0x5a,
	0xe4, 0x4b, 0x4f, 0x69, 0x99, 0xd3, 0xad, 0xde, 0x7e, 0xbe, 0x4f, 0x09, 0xdf, 0x18, 0xd4, 0xfd,
	0x7d, 0x08, 0x30, 0x27, 0x6a, 0x85, 0xcb, 0x78, 0xf4, 0x06, 0x9a, 0xf7, 0x42, 0xae, 0x96, 0xa9,
	0xb8, 0x0f, 0x13, 0xae, 0x34, 0xe1, 0x94, 0x85, 0x49, 0xe4, 0x58, 0x1d, 0xab, 0x57, 0xc5, 0x68,
	0xc7, 0x82, 0x2d, 0x0a, 0x22, 0x74, 0x0e, 0xc7, 0x45, 0x7b, 0x85, 0x74, 0x50, 0x4a, 0x76, 0x71,
	0x0c, 0x22, 0xf4, 0x0e, 0xce, 0x25, 0x23, 0x4a, 0xf0, 0x70, 0x29, 0x64, 0x98, 0x70, 0x2a, 0xb2,
	0x75, 0xca, 0x74, 0x22, 0xb8, 0x53, 0x29, 0xc5, 0x67, 0x06, 0xdf, 0x08, 0x19, 0x3c, 0x81, 0xe8,
	0x2d, 0xb4, 0x28, 0x49, 0xd3, 0x05, 0xa1, 0xab, 0x90, 0x2c, 0x35, 0x93, 0xa1, 0x62, 0xc5, 0x73,
	0x95, 0x73, 0xd8, 0xb1, 0x7a, 0x15, 0xdc, 0xdc, 0xd1, 0x41, 0x01, 0x67, 0x86, 0xa1, 0x0b, 0xa8,
	0x16, 0xcd, 0x31, 0x59, 0x34, 0x72, 0x54, 0xe6, 0x9f, 0x98, 0x42, 0x10, 0xa1, 0x2b, 0xb0, 0x95,
	0x26, 0x3a, 0x57, 0x8e, 0xdd, 0xb1, 0x7a, 0x67, 0xfd, 0xae, 0xbb, 0x37, 0x3f, 0xf7, 0x71, 0x04,
	0xee, 0xac, 0x34, 0xf1, 0xf6, 0x06, 0x1a, 0x41, 0x4d, 0xe4, 0x7a, 0x9d, 0xeb, 0x30, 0x22, 0x9a,
	0x38, 0xc7, 0x9d, 0x4a, 0xaf, 0xd6, 0x7f, 0xf5, 0xaf, 0x80, 0x49, 0xa9, 0x0f, 0x89, 0x26, 0x3e,
	0xd7, 0x72, 0x83, 0x41, 0x3c, 0x14, 0xd0, 0x07, 0x38, 0xdb, 0xa6, 0x65, 0x4c, 0x29, 0x12, 0x33,
	0xe7, 0xa4, 0x63, 0xf5, 0x6a, 0xfd, 0xa6, 0x6b, 0x56, 0xe4, 0xee, 0x56, 0xe4, 0x0e, 0xf8, 0x06,
	0x9f, 0x1a, 0x77, 0x6c, 0xd4, 0xf6, 0x57, 0xa8, 0xef, 0x65, 0xa3, 0x06, 0x54, 0x56, 0x6c, 0xb3,
	0x5d, 0x4f, 0xf1, 0x89, 0x5e, 0xc3, 0xd1, 0x1d, 0x49, 0x73, 0x56, 0x6e, 0xa3, 0xd6, 0x6f, 0xfd,
	0x15, 0xfc, 0xad, 0xa0, 0xd8, 0x48, 0x57, 0x07, 0xef, 0xad, 0xee, 0x1c, 0x6c, 0xf3, 0x66, 0x54,
	0x87, 0x5a, 0x70, 0x1b, 0x4e, 0xf1, 0xe4, 0x33, 0xf6, 0x67, 0xb3, 0xc6, 0x7f, 0x08, 0xc0, 0xbe,
	0x19, 0x04, 0x23, 0x7f, 0xd8, 0xb0, 0xd0, 0x4b, 0x68, 0x9b, 0xef, 0xf0, 0x7b, 0x30, 0xff, 0x12,
	0xce, 0x7d, 0x3c, 0x0e, 0x6e, 0x07, 0xa3, 0xd0, 0xc7, 0x78, 0x82, 0x1b, 0x07, 0xe8, 0x14, 0xaa,
	0x9f, 0x26, 0xe3, 0xe9, 0xc8, 0x9f, 0xfb, 0xc3, 0x46, 0xe5, 0x3a, 0x83, 0x0b, 0x2a, 0x32, 0x97,
	0x33, 0xbd, 0x4c, 0x93, 0x5f, 0xfb, 0xf3, 0xba, 0xfe, 0xff, 0x71, 0x60, 0xd3, 0xc5, 0x8f, 0x8f,
	0x71, 0xa2, 0x7f, 0xe6, 0x0b, 0x97, 0x8a, 0xcc, 0xcb, 0x08, 0xd5, 0x24, 0x8e, 0x89, 0xd4, 0xde,
	0xc3, 0x25, 0x8f, 0xa6, 0x09, 0xe3, 0xda, 0x8b, 0x45, 0x2c, 0xd7, 0xd4, 0xbb, 0xbb, 0x7c, 0x82,
	0xca, 0x5f, 0x64, 0x61, 0x97, 0xb1, 0x97, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x13, 0xd2, 0x13,
	0xdf, 0x32, 0x03, 0x00, 0x00,
}
