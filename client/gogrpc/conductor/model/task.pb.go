// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/task.proto

package model // import "github.com/mactaggart/conductor/client/gogrpc/conductor/model"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import _struct "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task_Status int32

const (
	Task_IN_PROGRESS                Task_Status = 0
	Task_CANCELED                   Task_Status = 1
	Task_FAILED                     Task_Status = 2
	Task_FAILED_WITH_TERMINAL_ERROR Task_Status = 3
	Task_COMPLETED                  Task_Status = 4
	Task_COMPLETED_WITH_ERRORS      Task_Status = 5
	Task_SCHEDULED                  Task_Status = 6
	Task_TIMED_OUT                  Task_Status = 7
	Task_SKIPPED                    Task_Status = 8
)

var Task_Status_name = map[int32]string{
	0: "IN_PROGRESS",
	1: "CANCELED",
	2: "FAILED",
	3: "FAILED_WITH_TERMINAL_ERROR",
	4: "COMPLETED",
	5: "COMPLETED_WITH_ERRORS",
	6: "SCHEDULED",
	7: "TIMED_OUT",
	8: "SKIPPED",
}
var Task_Status_value = map[string]int32{
	"IN_PROGRESS":                0,
	"CANCELED":                   1,
	"FAILED":                     2,
	"FAILED_WITH_TERMINAL_ERROR": 3,
	"COMPLETED":                  4,
	"COMPLETED_WITH_ERRORS":      5,
	"SCHEDULED":                  6,
	"TIMED_OUT":                  7,
	"SKIPPED":                    8,
}

func (x Task_Status) String() string {
	return proto.EnumName(Task_Status_name, int32(x))
}
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_task_b88401296660de06, []int{0, 0}
}

type Task struct {
	TaskType                         string                    `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	Status                           Task_Status               `protobuf:"varint,2,opt,name=status,proto3,enum=conductor.proto.Task_Status" json:"status,omitempty"`
	InputData                        map[string]*_struct.Value `protobuf:"bytes,3,rep,name=input_data,json=inputData,proto3" json:"input_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReferenceTaskName                string                    `protobuf:"bytes,4,opt,name=reference_task_name,json=referenceTaskName,proto3" json:"reference_task_name,omitempty"`
	RetryCount                       int32                     `protobuf:"varint,5,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Seq                              int32                     `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	CorrelationId                    string                    `protobuf:"bytes,7,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	PollCount                        int32                     `protobuf:"varint,8,opt,name=poll_count,json=pollCount,proto3" json:"poll_count,omitempty"`
	TaskDefName                      string                    `protobuf:"bytes,9,opt,name=task_def_name,json=taskDefName,proto3" json:"task_def_name,omitempty"`
	ScheduledTime                    int64                     `protobuf:"varint,10,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartTime                        int64                     `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                          int64                     `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	UpdateTime                       int64                     `protobuf:"varint,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	StartDelayInSeconds              int32                     `protobuf:"varint,14,opt,name=start_delay_in_seconds,json=startDelayInSeconds,proto3" json:"start_delay_in_seconds,omitempty"`
	RetriedTaskId                    string                    `protobuf:"bytes,15,opt,name=retried_task_id,json=retriedTaskId,proto3" json:"retried_task_id,omitempty"`
	Retried                          bool                      `protobuf:"varint,16,opt,name=retried,proto3" json:"retried,omitempty"`
	Executed                         bool                      `protobuf:"varint,17,opt,name=executed,proto3" json:"executed,omitempty"`
	CallbackFromWorker               bool                      `protobuf:"varint,18,opt,name=callback_from_worker,json=callbackFromWorker,proto3" json:"callback_from_worker,omitempty"`
	ResponseTimeoutSeconds           int64                     `protobuf:"varint,19,opt,name=response_timeout_seconds,json=responseTimeoutSeconds,proto3" json:"response_timeout_seconds,omitempty"`
	WorkflowInstanceId               string                    `protobuf:"bytes,20,opt,name=workflow_instance_id,json=workflowInstanceId,proto3" json:"workflow_instance_id,omitempty"`
	WorkflowType                     string                    `protobuf:"bytes,21,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskId                           string                    `protobuf:"bytes,22,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ReasonForIncompletion            string                    `protobuf:"bytes,23,opt,name=reason_for_incompletion,json=reasonForIncompletion,proto3" json:"reason_for_incompletion,omitempty"`
	CallbackAfterSeconds             int64                     `protobuf:"varint,24,opt,name=callback_after_seconds,json=callbackAfterSeconds,proto3" json:"callback_after_seconds,omitempty"`
	WorkerId                         string                    `protobuf:"bytes,25,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	OutputData                       map[string]*_struct.Value `protobuf:"bytes,26,rep,name=output_data,json=outputData,proto3" json:"output_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowTask                     *WorkflowTask             `protobuf:"bytes,27,opt,name=workflow_task,json=workflowTask,proto3" json:"workflow_task,omitempty"`
	Domain                           string                    `protobuf:"bytes,28,opt,name=domain,proto3" json:"domain,omitempty"`
	InputMessage                     *any.Any                  `protobuf:"bytes,29,opt,name=input_message,json=inputMessage,proto3" json:"input_message,omitempty"`
	OutputMessage                    *any.Any                  `protobuf:"bytes,30,opt,name=output_message,json=outputMessage,proto3" json:"output_message,omitempty"`
	RateLimitPerFrequency            int32                     `protobuf:"varint,32,opt,name=rate_limit_per_frequency,json=rateLimitPerFrequency,proto3" json:"rate_limit_per_frequency,omitempty"`
	RateLimitFrequencyInSeconds      int32                     `protobuf:"varint,33,opt,name=rate_limit_frequency_in_seconds,json=rateLimitFrequencyInSeconds,proto3" json:"rate_limit_frequency_in_seconds,omitempty"`
	ExternalInputPayloadStoragePath  string                    `protobuf:"bytes,34,opt,name=external_input_payload_storage_path,json=externalInputPayloadStoragePath,proto3" json:"external_input_payload_storage_path,omitempty"`
	ExternalOutputPayloadStoragePath string                    `protobuf:"bytes,35,opt,name=external_output_payload_storage_path,json=externalOutputPayloadStoragePath,proto3" json:"external_output_payload_storage_path,omitempty"`
	WorkflowPriority                 int32                     `protobuf:"varint,36,opt,name=workflow_priority,json=workflowPriority,proto3" json:"workflow_priority,omitempty"`
	ExecutionNameSpace               string                    `protobuf:"bytes,37,opt,name=execution_name_space,json=executionNameSpace,proto3" json:"execution_name_space,omitempty"`
	IsolationGroupId                 string                    `protobuf:"bytes,38,opt,name=isolation_group_id,json=isolationGroupId,proto3" json:"isolation_group_id,omitempty"`
	Iteration                        int32                     `protobuf:"varint,40,opt,name=iteration,proto3" json:"iteration,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                  `json:"-"`
	XXX_unrecognized                 []byte                    `json:"-"`
	XXX_sizecache                    int32                     `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_b88401296660de06, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *Task) GetStatus() Task_Status {
	if m != nil {
		return m.Status
	}
	return Task_IN_PROGRESS
}

func (m *Task) GetInputData() map[string]*_struct.Value {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *Task) GetReferenceTaskName() string {
	if m != nil {
		return m.ReferenceTaskName
	}
	return ""
}

func (m *Task) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *Task) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Task) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Task) GetPollCount() int32 {
	if m != nil {
		return m.PollCount
	}
	return 0
}

func (m *Task) GetTaskDefName() string {
	if m != nil {
		return m.TaskDefName
	}
	return ""
}

func (m *Task) GetScheduledTime() int64 {
	if m != nil {
		return m.ScheduledTime
	}
	return 0
}

func (m *Task) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Task) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Task) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Task) GetStartDelayInSeconds() int32 {
	if m != nil {
		return m.StartDelayInSeconds
	}
	return 0
}

func (m *Task) GetRetriedTaskId() string {
	if m != nil {
		return m.RetriedTaskId
	}
	return ""
}

func (m *Task) GetRetried() bool {
	if m != nil {
		return m.Retried
	}
	return false
}

func (m *Task) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *Task) GetCallbackFromWorker() bool {
	if m != nil {
		return m.CallbackFromWorker
	}
	return false
}

func (m *Task) GetResponseTimeoutSeconds() int64 {
	if m != nil {
		return m.ResponseTimeoutSeconds
	}
	return 0
}

func (m *Task) GetWorkflowInstanceId() string {
	if m != nil {
		return m.WorkflowInstanceId
	}
	return ""
}

func (m *Task) GetWorkflowType() string {
	if m != nil {
		return m.WorkflowType
	}
	return ""
}

func (m *Task) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Task) GetReasonForIncompletion() string {
	if m != nil {
		return m.ReasonForIncompletion
	}
	return ""
}

func (m *Task) GetCallbackAfterSeconds() int64 {
	if m != nil {
		return m.CallbackAfterSeconds
	}
	return 0
}

func (m *Task) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *Task) GetOutputData() map[string]*_struct.Value {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *Task) GetWorkflowTask() *WorkflowTask {
	if m != nil {
		return m.WorkflowTask
	}
	return nil
}

func (m *Task) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Task) GetInputMessage() *any.Any {
	if m != nil {
		return m.InputMessage
	}
	return nil
}

func (m *Task) GetOutputMessage() *any.Any {
	if m != nil {
		return m.OutputMessage
	}
	return nil
}

func (m *Task) GetRateLimitPerFrequency() int32 {
	if m != nil {
		return m.RateLimitPerFrequency
	}
	return 0
}

func (m *Task) GetRateLimitFrequencyInSeconds() int32 {
	if m != nil {
		return m.RateLimitFrequencyInSeconds
	}
	return 0
}

func (m *Task) GetExternalInputPayloadStoragePath() string {
	if m != nil {
		return m.ExternalInputPayloadStoragePath
	}
	return ""
}

func (m *Task) GetExternalOutputPayloadStoragePath() string {
	if m != nil {
		return m.ExternalOutputPayloadStoragePath
	}
	return ""
}

func (m *Task) GetWorkflowPriority() int32 {
	if m != nil {
		return m.WorkflowPriority
	}
	return 0
}

func (m *Task) GetExecutionNameSpace() string {
	if m != nil {
		return m.ExecutionNameSpace
	}
	return ""
}

func (m *Task) GetIsolationGroupId() string {
	if m != nil {
		return m.IsolationGroupId
	}
	return ""
}

func (m *Task) GetIteration() int32 {
	if m != nil {
		return m.Iteration
	}
	return 0
}

func init() {
	proto.RegisterType((*Task)(nil), "conductor.proto.Task")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "conductor.proto.Task.InputDataEntry")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "conductor.proto.Task.OutputDataEntry")
	proto.RegisterEnum("conductor.proto.Task_Status", Task_Status_name, Task_Status_value)
}

func init() { proto.RegisterFile("model/task.proto", fileDescriptor_task_b88401296660de06) }

var fileDescriptor_task_b88401296660de06 = []byte{
	// 1161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x6f, 0xdb, 0xb6,
	0x17, 0xfd, 0xb9, 0x69, 0xfc, 0xe7, 0x3a, 0x76, 0x54, 0x36, 0x71, 0x19, 0x27, 0x6d, 0xfc, 0x4b,
	0x9b, 0xc2, 0xc0, 0x0a, 0xbb, 0x48, 0x8b, 0xad, 0xdb, 0xb0, 0x87, 0xd4, 0x76, 0x5a, 0x61, 0xf9,
	0x63, 0xc8, 0xce, 0x02, 0xec, 0x85, 0x60, 0x24, 0xda, 0x11, 0x2c, 0x89, 0x2a, 0x45, 0xad, 0xf1,
	0xe7, 0xd9, 0xcb, 0x3e, 0xe6, 0x40, 0x52, 0x52, 0xbc, 0x34, 0xd8, 0xd3, 0xde, 0xc4, 0x73, 0xce,
	0xbd, 0xbe, 0xf7, 0x8a, 0xe7, 0xca, 0x60, 0x85, 0xdc, 0x63, 0x41, 0x5f, 0xd2, 0x64, 0xd1, 0x8b,
	0x05, 0x97, 0x1c, 0x6d, 0xba, 0x3c, 0xf2, 0x52, 0x57, 0x72, 0x61, 0x80, 0x36, 0x36, 0x92, 0xaf,
	0x5c, 0x2c, 0x66, 0x01, 0xff, 0x7a, 0x27, 0x6d, 0xef, 0xcd, 0x39, 0x9f, 0x07, 0xac, 0xaf, 0x4f,
	0xd7, 0xe9, 0xac, 0x9f, 0x48, 0x91, 0xba, 0x32, 0x63, 0x77, 0xee, 0xb3, 0x34, 0x5a, 0x1a, 0xea,
	0xe0, 0x4f, 0x0b, 0x1e, 0x4f, 0x69, 0xb2, 0x40, 0xbb, 0x50, 0x53, 0xf9, 0x88, 0x5c, 0xc6, 0x0c,
	0x97, 0x3a, 0xa5, 0x6e, 0xcd, 0xa9, 0x2a, 0x60, 0xba, 0x8c, 0x19, 0x7a, 0x0f, 0xe5, 0x44, 0x52,
	0x99, 0x26, 0xf8, 0x51, 0xa7, 0xd4, 0x6d, 0x1e, 0xed, 0xf5, 0xee, 0x95, 0xd6, 0x53, 0x39, 0x7a,
	0x13, 0xad, 0x71, 0x32, 0x2d, 0x1a, 0x00, 0xf8, 0x51, 0x9c, 0x4a, 0xe2, 0x51, 0x49, 0xf1, 0x5a,
	0x67, 0xad, 0x5b, 0x3f, 0x7a, 0xf5, 0x70, 0xa4, 0xad, 0x74, 0x43, 0x2a, 0xe9, 0x28, 0x92, 0x62,
	0xe9, 0xd4, 0xfc, 0xfc, 0x8c, 0x7a, 0xf0, 0x54, 0xb0, 0x19, 0x13, 0x2c, 0x72, 0x19, 0xd1, 0x15,
	0x46, 0x34, 0x64, 0xf8, 0xb1, 0xae, 0xf0, 0x49, 0x41, 0xa9, 0x2c, 0xe7, 0x34, 0x64, 0x68, 0x1f,
	0xea, 0x82, 0x49, 0xb1, 0x24, 0x2e, 0x4f, 0x23, 0x89, 0xd7, 0x3b, 0xa5, 0xee, 0xba, 0x03, 0x1a,
	0x1a, 0x28, 0x04, 0x59, 0xb0, 0x96, 0xb0, 0x2f, 0xb8, 0xac, 0x09, 0xf5, 0x88, 0x0e, 0xa1, 0xe9,
	0x72, 0x21, 0x58, 0x40, 0xa5, 0xcf, 0x23, 0xe2, 0x7b, 0xb8, 0xa2, 0xb3, 0x37, 0x56, 0x50, 0xdb,
	0x43, 0xcf, 0x01, 0x62, 0x1e, 0x04, 0x59, 0xe2, 0xaa, 0x8e, 0xaf, 0x29, 0xc4, 0xe4, 0x3d, 0x80,
	0x86, 0x2e, 0xcf, 0x63, 0x33, 0x53, 0x62, 0x4d, 0x27, 0xa9, 0x2b, 0x70, 0xc8, 0x66, 0xba, 0xb8,
	0x43, 0x68, 0x26, 0xee, 0x0d, 0xf3, 0xd2, 0x80, 0x79, 0x44, 0xfa, 0x21, 0xc3, 0xd0, 0x29, 0x75,
	0xd7, 0x9c, 0x46, 0x81, 0x4e, 0xfd, 0x90, 0xa9, 0x5f, 0x4a, 0x24, 0x15, 0xd2, 0x48, 0xea, 0x5a,
	0x52, 0xd3, 0x88, 0xa6, 0x77, 0xa0, 0xca, 0xa2, 0x2c, 0x7e, 0x43, 0x93, 0x15, 0x16, 0x99, 0xc8,
	0x7d, 0xa8, 0xa7, 0xb1, 0x47, 0x25, 0x33, 0x6c, 0x43, 0xb3, 0x60, 0x20, 0x2d, 0x78, 0x07, 0x2d,
	0x93, 0xda, 0x63, 0x01, 0x5d, 0x12, 0x3f, 0x22, 0x09, 0x53, 0x6f, 0x24, 0xc1, 0x4d, 0xdd, 0xd0,
	0x53, 0xcd, 0x0e, 0x15, 0x69, 0x47, 0x13, 0x43, 0xa1, 0xd7, 0xb0, 0xa9, 0x06, 0xe8, 0xab, 0xa2,
	0x55, 0x8b, 0xbe, 0x87, 0x37, 0xcd, 0x84, 0x32, 0x58, 0x4d, 0xdf, 0xf6, 0x10, 0x86, 0x4a, 0x06,
	0x60, 0xab, 0x53, 0xea, 0x56, 0x9d, 0xfc, 0x88, 0xda, 0x50, 0x65, 0xb7, 0xcc, 0x4d, 0x25, 0xf3,
	0xf0, 0x13, 0x4d, 0x15, 0x67, 0xf4, 0x16, 0xb6, 0x5c, 0x1a, 0x04, 0xd7, 0xd4, 0x5d, 0x90, 0x99,
	0xe0, 0x21, 0x51, 0xf7, 0x9b, 0x09, 0x8c, 0xb4, 0x0e, 0xe5, 0xdc, 0x89, 0xe0, 0xe1, 0x95, 0x66,
	0xd0, 0x07, 0xc0, 0x82, 0x25, 0x31, 0x8f, 0x12, 0xd3, 0x27, 0x4f, 0x65, 0xd1, 0xc6, 0x53, 0xdd,
	0x72, 0x2b, 0xe7, 0xa7, 0x86, 0xce, 0x3b, 0x79, 0x0b, 0x5b, 0xb9, 0x7b, 0x88, 0x1f, 0x25, 0x92,
	0xaa, 0x5b, 0xe5, 0x7b, 0x78, 0x4b, 0xb7, 0x83, 0x72, 0xce, 0xce, 0x28, 0xdb, 0x43, 0x2f, 0xa1,
	0x51, 0x44, 0x68, 0x6f, 0x6c, 0x6b, 0xe9, 0x46, 0x0e, 0x6a, 0x7f, 0x3c, 0x83, 0x4a, 0x3e, 0x98,
	0x96, 0xa6, 0xcb, 0xd2, 0x4c, 0xe4, 0x7b, 0x78, 0x26, 0x18, 0x4d, 0x78, 0x44, 0x66, 0x5c, 0x10,
	0x3f, 0x72, 0x79, 0x18, 0x07, 0x4c, 0x5d, 0x28, 0xfc, 0x4c, 0x0b, 0xb7, 0x0d, 0x7d, 0xc2, 0x85,
	0xbd, 0x42, 0xa2, 0xf7, 0xd0, 0x2a, 0x66, 0x42, 0x67, 0x92, 0x89, 0xa2, 0x3f, 0xac, 0xfb, 0x2b,
	0x26, 0x76, 0xac, 0xc8, 0xbc, 0xbb, 0x5d, 0xa8, 0x99, 0xd9, 0xa9, 0x42, 0x76, 0x8c, 0x87, 0x0d,
	0x60, 0x7b, 0xe8, 0x04, 0xea, 0x3c, 0x95, 0x85, 0x1d, 0xdb, 0xda, 0x8e, 0x87, 0x0f, 0xdb, 0xf1,
	0x42, 0x0b, 0xef, 0xfc, 0x08, 0xbc, 0x00, 0xd0, 0xc7, 0xd5, 0x81, 0xd0, 0x64, 0x81, 0x77, 0x3b,
	0xa5, 0x6e, 0xfd, 0xe8, 0xf9, 0x37, 0x99, 0xae, 0xf2, 0x09, 0xd1, 0x64, 0xb1, 0x32, 0x2f, 0xb5,
	0x6c, 0x5a, 0x50, 0xf6, 0x78, 0x48, 0xfd, 0x08, 0xef, 0x99, 0x71, 0x99, 0x13, 0xfa, 0x11, 0x1a,
	0x66, 0x63, 0x84, 0x2c, 0x49, 0xe8, 0x9c, 0xe1, 0xe7, 0x3a, 0xf7, 0x56, 0xcf, 0x2c, 0xb0, 0x5e,
	0xbe, 0xc0, 0x7a, 0xc7, 0xd1, 0xd2, 0xd9, 0xd0, 0xd2, 0x33, 0xa3, 0x44, 0x3f, 0x43, 0x33, 0x6b,
	0x2f, 0x8f, 0x7d, 0xf1, 0x2f, 0xb1, 0x0d, 0xa3, 0xcd, 0x83, 0x7f, 0x00, 0x2c, 0x94, 0x69, 0x02,
	0x3f, 0xf4, 0x25, 0x89, 0x99, 0x20, 0x33, 0xc1, 0xbe, 0xa4, 0x2c, 0x72, 0x97, 0xb8, 0xa3, 0x7d,
	0xb1, 0xad, 0xf8, 0x53, 0x45, 0x8f, 0x99, 0x38, 0xc9, 0x49, 0x34, 0x84, 0xfd, 0x95, 0xc0, 0x22,
	0x68, 0xd5, 0x57, 0xff, 0xd7, 0xf1, 0xbb, 0x45, 0x7c, 0x11, 0x7c, 0xe7, 0xaf, 0x53, 0x78, 0xc9,
	0x6e, 0x25, 0x13, 0x11, 0x0d, 0x88, 0xe9, 0x3f, 0xa6, 0xcb, 0x80, 0x53, 0x8f, 0x24, 0x92, 0x0b,
	0x3a, 0x67, 0x24, 0xa6, 0xf2, 0x06, 0x1f, 0xe8, 0x59, 0xed, 0xe7, 0x52, 0xbd, 0x33, 0xc7, 0x46,
	0x38, 0x31, 0xba, 0x31, 0x95, 0x37, 0xe8, 0x1c, 0x5e, 0x15, 0xd9, 0xb2, 0x91, 0x3c, 0x98, 0xee,
	0xa5, 0x4e, 0xd7, 0xc9, 0xb5, 0xe6, 0x9d, 0x3f, 0x90, 0xef, 0x3b, 0x78, 0x52, 0xbc, 0xf0, 0x58,
	0xf8, 0x5c, 0xf8, 0x72, 0x89, 0x5f, 0xe9, 0xae, 0xac, 0x9c, 0x18, 0x67, 0xb8, 0x32, 0x98, 0x31,
	0xb6, 0xda, 0xa4, 0x6a, 0x0d, 0x92, 0x24, 0xa6, 0x2e, 0xc3, 0x87, 0xc6, 0x60, 0x05, 0xa7, 0xd6,
	0xe1, 0x44, 0x31, 0xe8, 0x0d, 0x20, 0x3f, 0xe1, 0xd9, 0xee, 0x9d, 0x0b, 0x9e, 0xc6, 0xea, 0xf6,
	0xbe, 0xd6, 0x7a, 0xab, 0x60, 0x3e, 0x29, 0xc2, 0xf6, 0xd0, 0x1e, 0xd4, 0x7c, 0xc9, 0x84, 0xc6,
	0x70, 0xd7, 0xec, 0xe0, 0x02, 0x68, 0x4f, 0xa1, 0xf9, 0xcf, 0x2f, 0x89, 0xda, 0xf6, 0x0b, 0xb6,
	0xcc, 0x3e, 0x68, 0xea, 0x11, 0xbd, 0x81, 0xf5, 0x3f, 0x68, 0x90, 0x32, 0xfd, 0x29, 0xab, 0x1f,
	0xb5, 0xbe, 0xb9, 0x1f, 0xbf, 0x29, 0xd6, 0x31, 0xa2, 0x9f, 0x1e, 0x7d, 0x28, 0xb5, 0x2f, 0x61,
	0xf3, 0x9e, 0x21, 0xfe, 0x8b, 0xb4, 0x07, 0x7f, 0x95, 0xa0, 0x6c, 0xbe, 0x98, 0x68, 0x13, 0xea,
	0xf6, 0x39, 0x19, 0x3b, 0x17, 0x9f, 0x9c, 0xd1, 0x64, 0x62, 0xfd, 0x0f, 0x6d, 0x40, 0x75, 0x70,
	0x7c, 0x3e, 0x18, 0x9d, 0x8e, 0x86, 0x56, 0x09, 0x01, 0x94, 0x4f, 0x8e, 0x6d, 0xf5, 0xfc, 0x08,
	0xbd, 0x80, 0xb6, 0x79, 0x26, 0x57, 0xf6, 0xf4, 0x33, 0x99, 0x8e, 0x9c, 0x33, 0xfb, 0xfc, 0xf8,
	0x94, 0x8c, 0x1c, 0xe7, 0xc2, 0xb1, 0xd6, 0x50, 0x03, 0x6a, 0x83, 0x8b, 0xb3, 0xf1, 0xe9, 0x68,
	0x3a, 0x1a, 0x5a, 0x8f, 0xd1, 0x0e, 0x6c, 0x17, 0x47, 0x13, 0xa1, 0x85, 0x13, 0x6b, 0x5d, 0x29,
	0x27, 0x83, 0xcf, 0xa3, 0xe1, 0xa5, 0x4a, 0x5c, 0x56, 0xc7, 0xa9, 0x7d, 0x36, 0x1a, 0x92, 0x8b,
	0xcb, 0xa9, 0x55, 0x41, 0x75, 0xa8, 0x4c, 0x7e, 0xb5, 0xc7, 0xe3, 0xd1, 0xd0, 0xaa, 0x7e, 0xf4,
	0x60, 0xd7, 0xe5, 0x61, 0x2f, 0x62, 0x72, 0x16, 0xf8, 0xb7, 0xf7, 0x9d, 0xfe, 0xb1, 0xac, 0x4c,
	0x3d, 0xbe, 0xfe, 0xfd, 0x97, 0xb9, 0x2f, 0x6f, 0xd2, 0xeb, 0x9e, 0xcb, 0xc3, 0x7e, 0x48, 0x5d,
	0x49, 0xe7, 0x73, 0x2a, 0x64, 0xbf, 0x90, 0xf7, 0xdd, 0xc0, 0x67, 0x91, 0xec, 0xcf, 0xf9, 0x5c,
	0xc4, 0xee, 0x0a, 0xae, 0xff, 0xd7, 0x5c, 0x97, 0x75, 0xb6, 0x77, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x27, 0x24, 0x9d, 0xa7, 0x0a, 0x09, 0x00, 0x00,
}
