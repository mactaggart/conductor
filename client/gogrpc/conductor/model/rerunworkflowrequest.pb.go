// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/rerunworkflowrequest.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RerunWorkflowRequest struct {
	ReRunFromWorkflowId  string                    `protobuf:"bytes,1,opt,name=re_run_from_workflow_id,json=reRunFromWorkflowId,proto3" json:"re_run_from_workflow_id,omitempty"`
	WorkflowInput        map[string]*_struct.Value `protobuf:"bytes,2,rep,name=workflow_input,json=workflowInput,proto3" json:"workflow_input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReRunFromTaskId      string                    `protobuf:"bytes,3,opt,name=re_run_from_task_id,json=reRunFromTaskId,proto3" json:"re_run_from_task_id,omitempty"`
	TaskInput            map[string]*_struct.Value `protobuf:"bytes,4,rep,name=task_input,json=taskInput,proto3" json:"task_input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CorrelationId        string                    `protobuf:"bytes,5,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RerunWorkflowRequest) Reset()         { *m = RerunWorkflowRequest{} }
func (m *RerunWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*RerunWorkflowRequest) ProtoMessage()    {}
func (*RerunWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a17b18179382c66f, []int{0}
}

func (m *RerunWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RerunWorkflowRequest.Unmarshal(m, b)
}
func (m *RerunWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RerunWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *RerunWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RerunWorkflowRequest.Merge(m, src)
}
func (m *RerunWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_RerunWorkflowRequest.Size(m)
}
func (m *RerunWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RerunWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RerunWorkflowRequest proto.InternalMessageInfo

func (m *RerunWorkflowRequest) GetReRunFromWorkflowId() string {
	if m != nil {
		return m.ReRunFromWorkflowId
	}
	return ""
}

func (m *RerunWorkflowRequest) GetWorkflowInput() map[string]*_struct.Value {
	if m != nil {
		return m.WorkflowInput
	}
	return nil
}

func (m *RerunWorkflowRequest) GetReRunFromTaskId() string {
	if m != nil {
		return m.ReRunFromTaskId
	}
	return ""
}

func (m *RerunWorkflowRequest) GetTaskInput() map[string]*_struct.Value {
	if m != nil {
		return m.TaskInput
	}
	return nil
}

func (m *RerunWorkflowRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func init() {
	proto.RegisterType((*RerunWorkflowRequest)(nil), "conductor.proto.RerunWorkflowRequest")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "conductor.proto.RerunWorkflowRequest.TaskInputEntry")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "conductor.proto.RerunWorkflowRequest.WorkflowInputEntry")
}

func init() { proto.RegisterFile("model/rerunworkflowrequest.proto", fileDescriptor_a17b18179382c66f) }

var fileDescriptor_a17b18179382c66f = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4f, 0xab, 0xda, 0x40,
	0x14, 0xc5, 0x89, 0x7f, 0x0a, 0x8e, 0xa8, 0x65, 0x2c, 0x56, 0x6c, 0x17, 0xa1, 0x50, 0x70, 0x21,
	0x13, 0xb0, 0x2e, 0xa4, 0xd0, 0x8d, 0xd0, 0x82, 0xbb, 0x92, 0x4a, 0x5b, 0xba, 0x09, 0xc9, 0x64,
	0x92, 0x86, 0x24, 0x73, 0xed, 0xcd, 0x4c, 0x7d, 0x7e, 0x82, 0xf7, 0xb5, 0x1f, 0x99, 0x18, 0xcd,
	0xf3, 0xb9, 0x78, 0x8b, 0xb7, 0xcb, 0x9c, 0x9c, 0x7b, 0xce, 0x2f, 0x77, 0x42, 0xec, 0x1c, 0x42,
	0x91, 0x39, 0x28, 0x50, 0xcb, 0x03, 0x60, 0x1a, 0x65, 0x70, 0x40, 0xf1, 0x4f, 0x8b, 0x42, 0xb1,
	0x3d, 0x82, 0x02, 0x3a, 0xe2, 0x20, 0x43, 0xcd, 0x15, 0x60, 0x25, 0xcc, 0xde, 0xc7, 0x00, 0x71,
	0x26, 0x1c, 0x73, 0x0a, 0x74, 0xe4, 0x14, 0x0a, 0x35, 0x3f, 0xd9, 0x3f, 0xdc, 0x77, 0xc8, 0x1b,
	0xb7, 0x4c, 0xfb, 0x75, 0x4a, 0x73, 0xab, 0x34, 0xba, 0x22, 0x6f, 0x51, 0x78, 0xa8, 0xa5, 0x17,
	0x21, 0xe4, 0x5e, 0x5d, 0xe6, 0x25, 0xe1, 0xd4, 0xb2, 0xad, 0x79, 0xcf, 0x1d, 0xa3, 0x70, 0xb5,
	0xfc, 0x86, 0x90, 0xd7, 0xa3, 0xdb, 0x90, 0x7a, 0x64, 0x78, 0x71, 0xca, 0xbd, 0x56, 0xd3, 0x96,
	0xdd, 0x9e, 0xf7, 0x97, 0x6b, 0x76, 0x85, 0xc5, 0x6e, 0x95, 0xb2, 0x73, 0x52, 0x39, 0xfa, 0x55,
	0x2a, 0x3c, 0xba, 0x83, 0x43, 0x53, 0xa3, 0x0b, 0x32, 0x6e, 0x62, 0x29, 0xbf, 0x48, 0x4b, 0xa4,
	0xb6, 0x41, 0x1a, 0x9d, 0x91, 0x76, 0x7e, 0x91, 0x6e, 0x43, 0xfa, 0x83, 0x90, 0xca, 0x61, 0x50,
	0x3a, 0x06, 0x65, 0xf5, 0x3c, 0x14, 0x93, 0x70, 0xc1, 0xe8, 0xa9, 0xfa, 0x4c, 0x3f, 0x92, 0x21,
	0x07, 0x44, 0x91, 0xf9, 0x2a, 0x01, 0x59, 0xb6, 0x77, 0x4d, 0xfb, 0xa0, 0xa1, 0x6e, 0xc3, 0xd9,
	0x6f, 0x42, 0x9f, 0x7e, 0x0e, 0x7d, 0x4d, 0xda, 0xa9, 0x38, 0x9e, 0x56, 0x58, 0x3e, 0xd2, 0x05,
	0xe9, 0xfe, 0xf7, 0x33, 0x2d, 0xa6, 0x2d, 0xdb, 0x9a, 0xf7, 0x97, 0x13, 0x56, 0xdd, 0x17, 0xab,
	0xef, 0x8b, 0xfd, 0x2c, 0xdf, 0xba, 0x95, 0xe9, 0x73, 0x6b, 0x6d, 0xcd, 0x76, 0x64, 0xf8, 0x98,
	0xee, 0x25, 0x52, 0x37, 0x8a, 0xbc, 0xe3, 0x90, 0x33, 0x29, 0x54, 0x94, 0x25, 0x77, 0xd7, 0x4b,
	0xda, 0x4c, 0x6e, 0x6d, 0xe9, 0x7b, 0xf0, 0xe7, 0x4b, 0x9c, 0xa8, 0xbf, 0x3a, 0x60, 0x1c, 0x72,
	0x27, 0xf7, 0xb9, 0xf2, 0xe3, 0xd8, 0x47, 0xe5, 0x9c, 0xc7, 0x1d, 0x9e, 0x25, 0x42, 0x2a, 0x27,
	0x86, 0x18, 0xf7, 0xbc, 0xa1, 0x9b, 0x3f, 0x39, 0x78, 0x65, 0xd2, 0x3f, 0x3d, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xc7, 0xa0, 0x4e, 0xa9, 0xd9, 0x02, 0x00, 0x00,
}
